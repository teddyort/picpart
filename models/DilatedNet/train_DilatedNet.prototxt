layer {
  name: "data"
  type: "Python"
  top: "data"
  top: "label"
  python_param {
    module: "ade_layers"
    layer: "AdeSegDataLayer"
    param_str: "{\'seed\': 1337, \'randomize\': True, \'split\': \'training\', \'mean\': (109.5388, 118.6897, 124.6901), \'batch_size\': 8, \'phase\': \'TRAIN\', \'fine_size\': 384, \'resize_mode\': \'scale\', \'loader\': \'h5\'}"
  }
  include {
    phase: TRAIN
  }
}

layer {
  name: "data"
  type: "Python"
  top: "data"
  top: "label"
  python_param {
    module: "ade_layers"
    layer: "AdeSegDataLayer"
    param_str: "{\'seed\': 1337, \'randomize\': False, \'split\': \'validation\', \'mean\': (109.5388, 118.6897, 124.6901), \'batch_size\': 2, \'phase\': \'TEST\', \'fine_size\': 384, \'resize_mode\': \'scale\', \'loader\': \'h5\'}"
  }
  include {
    phase: TEST
  }
}

layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  convolution_param {
    num_output: 64
    kernel_size: 3
    pad: 1
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  convolution_param {
    num_output: 64
    kernel_size: 3
    pad: 1
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  convolution_param {
    num_output: 128
    kernel_size: 3
    pad: 1
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  convolution_param {
    num_output: 128
    kernel_size: 3
    pad: 1
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  convolution_param {
    num_output: 256
    kernel_size: 3
    pad: 1
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  convolution_param {
    num_output: 256
    kernel_size: 3
    pad: 1
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  convolution_param {
    num_output: 256
    kernel_size: 3
    pad: 1
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "conv4_3"
  top: "conv5_1"
  convolution_param {
    num_output: 512
    kernel_size: 3
    dilation: 2
    pad: 2
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  convolution_param {
    num_output: 512
    kernel_size: 3
    dilation: 2
    pad: 2
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  convolution_param {
    num_output: 512
    kernel_size: 3
    dilation: 2
    pad: 2
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}
layer {
  name: "fc6"
  type: "Convolution"
  bottom: "conv5_3"
  top: "fc6"
  convolution_param {
    num_output: 4096
    kernel_size: 7
    dilation: 4
    pad: 12
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "Convolution"
  bottom: "fc6"
  top: "fc7"
  convolution_param {
    num_output: 4096
    kernel_size: 1
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc-final151"
  type: "Convolution"
  bottom: "fc7"
  top: "fc_final"
  convolution_param {
    num_output: 151
    kernel_size: 1
  }
}
layer {
  name: "upsample"
  type: "Deconvolution"
  bottom: "fc_final" 
  top: "fc_final_up"
  convolution_param {
    kernel_size: 16
    stride: 8
    num_output: 151
    group: 151
    pad: 4
    weight_filler: { type: "bilinear" } 
    bias_term: false
  }
  param { lr_mult: 0 decay_mult: 0 }
}

layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc_final_up"
  bottom: "label"
  top: "loss"
  loss_param {
    ignore_label: 0
  }
}

layer {
  name: "SegAccuracy"
  type: "Python"
  bottom: "fc_final_up"
  bottom: "label"
  top: "seg_accuracy"
  python_param {
    module: "accuracy_layer"
    layer: "SegmentationAccuracy"
    param_str: "{\'ignore_label\': 0, \'verbose\': True}"
  }
  include {
    phase: TEST
  }
}

layer {
  name: "IoU"
  type: "Python"
  bottom: "fc_final_up"
  bottom: "label"
  top: "meanIoU"
  python_param {
    module: "IoU_layer"
    layer: "IoULayer"
    param_str: "{\'classes\': 151, \'verbose\': False}"
  }
}

layer {
  name: "Accuracy"
  type: "Accuracy"
  bottom: "fc_final_up"
  bottom: "label"
  top: "accuracy"
  accuracy_param {
    top_k: 1
    ignore_label: 0
    axis: 1
  }
}

layer {
  name: "Logger"
  type: "Python"
  bottom: "accuracy"
  bottom: "meanIoU"
  bottom: "loss"
  python_param {
    module: "log_layer"
    layer: "LogLayer"
    param_str: "{\'file\':\'DilatedNet_train_log_Dec08_1115.txt\',\'headers\': (\'accuracy\',\'meanIoU\',\'loss\')}"
  }
  include {
    phase: TRAIN
  }
}
layer {
  name: "Logger"
  type: "Python"
  bottom: "accuracy"
  bottom: "meanIoU"
  bottom: "loss"
  python_param {
    module: "log_layer"
    layer: "LogLayer"
    param_str: "{\'file\':\'DilatedNet_test_log_Dec08_1115.txt\',\'headers\': (\'accuracy\',\'meanIoU\',\'loss\')}"
  }
  include {
    phase: TEST
  }
}
